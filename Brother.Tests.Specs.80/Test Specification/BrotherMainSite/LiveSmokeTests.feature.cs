// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Brother.MainSite.Tests.Specs.TestSpecification.BrotherMainSite
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("All sites on all Webservers are Up and Running")]
    [NUnit.Framework.CategoryAttribute("PROD")]
    public partial class AllSitesOnAllWebserversAreUpAndRunningFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "LiveSmokeTests.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "All sites on all Webservers are Up and Running", "In order to purchase a new brother item\r\nAs a customer\r\nI want to be able to brow" +
                    "se through brother website", ProgrammingLanguage.CSharp, new string[] {
                        "PROD"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the home page for all brother domains are loading properly")]
        [NUnit.Framework.CategoryAttribute("ACCESSIBILITY")]
        [NUnit.Framework.TestCaseAttribute("United Kingdom", null)]
        [NUnit.Framework.TestCaseAttribute("France", null)]
        [NUnit.Framework.TestCaseAttribute("Italy", null)]
        [NUnit.Framework.TestCaseAttribute("Netherlands", null)]
        [NUnit.Framework.TestCaseAttribute("Spain", null)]
        [NUnit.Framework.TestCaseAttribute("Denmark", null)]
        [NUnit.Framework.TestCaseAttribute("Norway", null)]
        [NUnit.Framework.TestCaseAttribute("Sweden", null)]
        [NUnit.Framework.TestCaseAttribute("Finland", null)]
        [NUnit.Framework.TestCaseAttribute("Estonia", null)]
        [NUnit.Framework.TestCaseAttribute("Iceland", null)]
        [NUnit.Framework.TestCaseAttribute("Latvia", null)]
        [NUnit.Framework.TestCaseAttribute("Portugal", null)]
        [NUnit.Framework.TestCaseAttribute("Germany", null)]
        [NUnit.Framework.TestCaseAttribute("Austria", null)]
        [NUnit.Framework.TestCaseAttribute("Poland", null)]
        [NUnit.Framework.TestCaseAttribute("Romania", null)]
        [NUnit.Framework.TestCaseAttribute("Czech Republic", null)]
        [NUnit.Framework.TestCaseAttribute("Slovakia", null)]
        [NUnit.Framework.TestCaseAttribute("Slovenia", null)]
        [NUnit.Framework.TestCaseAttribute("Hungary", null)]
        public virtual void VerifyTheHomePageForAllBrotherDomainsAreLoadingProperly(string country, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ACCESSIBILITY"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the home page for all brother domains are loading properly", @__tags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given(string.Format("I have navigated to the \"{0}\" Brother Main Site", country), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.Then("I shold see the tilte of the page is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
 testRunner.And("the footer of the home page is displayed properly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that the printer listing page is displayed with the list of printers")]
        [NUnit.Framework.CategoryAttribute("ACCESSIBILITY")]
        [NUnit.Framework.TestCaseAttribute("United Kingdom", "printers/all-Printers", null)]
        [NUnit.Framework.TestCaseAttribute("Denmark", "printers/all-printers", null)]
        [NUnit.Framework.TestCaseAttribute("Norway", "printers/all-printers", null)]
        [NUnit.Framework.TestCaseAttribute("Sweden", "printers/all-printers", null)]
        [NUnit.Framework.TestCaseAttribute("Finland", "printers/all-printers", null)]
        [NUnit.Framework.TestCaseAttribute("Estonia", "printers/all-printers", null)]
        [NUnit.Framework.TestCaseAttribute("Iceland", "printers/all-printers", null)]
        [NUnit.Framework.TestCaseAttribute("Poland", "printers/all-printers", null)]
        [NUnit.Framework.TestCaseAttribute("Romania", "printers/all-printers", null)]
        [NUnit.Framework.TestCaseAttribute("Czech Republic", "printers/all-printers", null)]
        [NUnit.Framework.TestCaseAttribute("Slovakia", "printers/all-printers", null)]
        [NUnit.Framework.TestCaseAttribute("Slovenia", "printers/all-printers", null)]
        [NUnit.Framework.TestCaseAttribute("Hungary", "printers/all-printers", null)]
        [NUnit.Framework.TestCaseAttribute("Netherlands", "printers/all-in-ones", null)]
        [NUnit.Framework.TestCaseAttribute("France", "imprimantes/imprimantes-laser", null)]
        [NUnit.Framework.TestCaseAttribute("Italy", "printers-and-all-in-one/lasermono-printers", null)]
        [NUnit.Framework.TestCaseAttribute("Spain", "multifuncion/gama-completa", null)]
        [NUnit.Framework.TestCaseAttribute("Portugal", "multifuncoes/gama-impressoras-multifuncoes", null)]
        [NUnit.Framework.TestCaseAttribute("Latvia", "printeri/visi-printeri", null)]
        public virtual void VerifyThatThePrinterListingPageIsDisplayedWithTheListOfPrinters(string country, string pageUrl, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ACCESSIBILITY"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that the printer listing page is displayed with the list of printers", @__tags);
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given(string.Format("I have navigated to the \"{0}\" Brother Main Site", country), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.And(string.Format("I navigated to the \"{0}\" all printers page \"{1}\"", country, pageUrl), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.Then("I should see a list of all printers loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
