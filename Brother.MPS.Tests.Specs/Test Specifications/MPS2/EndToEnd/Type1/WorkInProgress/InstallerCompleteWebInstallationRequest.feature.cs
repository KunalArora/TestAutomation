// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Brother.Tests.Specs.TestSpecifications.MPS2.EndToEnd.Type1.WorkInProgress
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BusinessScenario_1_WIP_InstallerCompleteWebInstallationRequestSteps")]
    public partial class BusinessScenario_1_WIP_InstallerCompleteWebInstallationRequestStepsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "InstallerCompleteWebInstallationRequest.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BusinessScenario_1_WIP_InstallerCompleteWebInstallationRequestSteps", "\tIn order to complete installation of Cloud MPS devices for a contract\r\n\tAs a Clo" +
                    "ud MPS Dealer\r\n\tI want to see that an installation request has been completed", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Business Scenario 1 - Installer Complete Web Installation Request Steps")]
        [NUnit.Framework.TestCaseAttribute("United Kingdom", "160627", "DCP-8110DN", "A3P145602", "23", "100", "DCP-8250DN", "A3P145617", "https://online65.co.uk.cds.uat.brother.eu.com/mps/web-installation/installation-c" +
            "ontract-reference?token=0b82a1812f53425621f0307a392f866f50316", null)]
        public virtual void BusinessScenario1_InstallerCompleteWebInstallationRequestSteps(string country, string proposalId, string model_1, string serialNumber_1, string monoPrintCount_1, string colorPrintCount_1, string model_2, string serialNumber_2, string webInstallUrl, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Business Scenario 1 - Installer Complete Web Installation Request Steps", exampleTags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
testRunner.Given(string.Format("that a Brother installer has navigated to the Web Installation page at \"{0}\"", webInstallUrl), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Model",
                        "SerialNumber"});
            table1.AddRow(new string[] {
                        string.Format("{0}", model_1),
                        string.Format("{0}", serialNumber_1)});
            table1.AddRow(new string[] {
                        string.Format("{0}", model_2),
                        string.Format("{0}", serialNumber_2)});
#line 9
testRunner.When(string.Format("I verify the Contract Reference for \"{0}\" and store Serial Numbers for printers", proposalId), ((string)(null)), table1, "When ");
#line 13
testRunner.And("I enter the serial numbers and complete installation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
testRunner.And(string.Format("I have navigated to the Contracts Accepted page as a \"Cloud MPS Dealer\" from \"{0}" +
                        "\"", country), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
testRunner.And(string.Format("I have navigated to the Manage Devices for \"{0}\"", proposalId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
testRunner.And("I will be able to see on the Manage Devices page that all devices for the above c" +
                    "ontract are connected with default Print Counts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
testRunner.And(string.Format("I update the print count for \"{0}\" to {1} and {2}", serialNumber_1, monoPrintCount_1, colorPrintCount_1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
testRunner.Then(string.Format("I will be able to see on the Manage Devices page that \"{0}\" have updated Print Co" +
                        "unts", serialNumber_1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
